generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Unverified_Users {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  username  String
  password  String
  otp       String?
}

model Users {
  id                   Int          @id @default(autoincrement())
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  email                String       @unique
  username             String
  password             String
  hashRT               String?
  role                 Role         @default(USER)
  signInMethod         String       @default("local.com")
  onBoarded            Boolean      @default(false)
  brand                Brand[]
  SavedWeb             SavedWeb[]
  ReleasedWeb          ReleasedWeb?
  Products             Products[]
  instagramAccessToken String?
  isInstagramLinked    Boolean      @default(false)
  instagramId          String?
}

model Brand {
  id                   Int          @id @default(autoincrement())
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  owner                Users        @relation(fields: [ownerId], references: [id])
  ownerId              Int          @unique()
  brandName            String
  companyName          String
  officialPhone        String
  officialEmail        String
  customerServicePhone String?
  customerServiceEmail String
  logo                 String?
  instagramAccount     String?
  facebookAccount      String?
  otherAccount         String?
  description          String       @default("")
  privacyPolicy        String?
  termsAndConditions   String?
  motto                String?
  category             String
  verified             Boolean      @default(false)
  link                 String       @unique()
  ReleasedWeb          ReleasedWeb?
  Products             Products[]

  @@map("Brand")
}

model SavedWeb {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  owner     Users      @relation(fields: [ownerId], references: [id])
  ownerId   Int
  blueprint String
  name      String
  Products  Products[]
}

model ReleasedWeb {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  owner     Users    @relation(fields: [ownerId], references: [id])
  ownerId   Int      @unique
  brand     Brand    @relation(fields: [brandId], references: [id])
  brandId   Int      @unique
  name      String
  blueprint String
}

model Products {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  owner       Users    @relation(fields: [ownerId], references: [id])
  ownerId     Int
  brand       Brand    @relation(fields: [brandId], references: [id])
  brandId     Int
  hop         SavedWeb @relation(fields: [hopId], references: [id])
  hopId       Int
  title       String
  description String
  price       String
  redirection String
  src         String
  background  String
}

model PasswordOtp {
  id        Int    @id @default(autoincrement())
  hashOtp   String
  user_mail String @unique
}

enum Role {
  USER
  ADMIN
}
